#Boraciu Ionut-Sorin #

**Grupa: 315CA**

## Tema1

### Descriere:

Dupa ce arena a fost alocata, cand se aloca un block se fac urmatoarele verificari:
	- daca deja a fost alocat un block astfel incat noul block se afla in continuarea 
	memoriei virtuale a acestuia atunci se va adauga un nou miniblock la block-ul deja
	existent.
	- daca prima conditie nu este verificata va fi adaugat in ordine un block nou
	- la final se verifica daca block-urile adiacente ar trebuii concatenate

La functia de eliberare a unui block se cauta pozitia miniblock-ului, iar in functia de acesta
se elibereaza miniblock-ul corespunzator, daca este ulitmul miniblock din lista atunci se
elibereaza si block-ul. Iar daca se afla in mijlocul listei, block-ul este spart in 2 block-uri.

Functia de MPROTECT va schimba permisiunile de accesare a datelor salvate la zonele de memorie
virtuala, astfel sa nu poata fi accesate, sau citite, etc.

Functia WRITE cauta pozitia de unde trebuie sa inceapa sa scrie. Daca are loc in acel miniblock
va scrie totul in el, altfel va continua pe urmatoarele miniblock-uri, daca exista. Daca
dimensiunea de scris este prea mare se scrie cat are loc in acel block.

Functia READ va citi ( daca are permisiunea sa faca asta) datele salvate in adresa de memorie
specificata.

Functia PMAP va printa datele din arena si permisiunile de acces ale acestora.

Functia de DEALLOC va elibera toate resursele programului si il va opri.


### Comentarii asupra temei:

Consider ca as fi putut sa fiu mai eficient prin unele zone, prin retinerea nu doar a head-ului
pentru o lista ci si a tail-ului, pentru a le parcurge mai eficient cand cautam o anumita zona
de memorie.

Din acesta tema, am devenit mai bun in a repara leak-urile si in a le identifica. Si am inteles mai bine cum functioneaza listele dublu inlantuite, m-am obisnuit mai mult cu tipul de
date void* si cu cast-urile necesare folosirii acestuia.
